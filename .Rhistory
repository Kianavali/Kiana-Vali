ungroup() %>%
mutate(p_val_adj = signif(p_val_adj, 3)) %>%
arrange(Cluster, desc(avg_log2FC))
# ðŸ“‹ Table
top5_both %>%
select(Cluster, display_gene, avg_log2FC, p_val_adj, direction) %>%
kable(format = "html", digits = 2,
caption = "Top 5 Up & Down Genes per Cell Type (Based on Fold Change)")
# ðŸ“Š Plot
ggplot(top5_both,
aes(x = fct_reorder(display_gene, avg_log2FC),
y = avg_log2FC,
color = direction)) +
geom_point(size = 3) +
geom_segment(aes(xend = display_gene, y = 0, yend = avg_log2FC),
linewidth = 0.6) +
facet_wrap(~ Cluster, scales = "free_y") +
coord_flip() +
scale_color_manual(values = c("Up (old vs young)" = "firebrick2",
"Down (old vs young)" = "dodgerblue3")) +
labs(title = "Top 5 Up & Down DEGs per Cell Type (Based on Fold Change)",
x = "Gene", y = "log2FC (old vs young)", color = "") +
theme_minimal(base_size = 12) +
theme(legend.position = "top")
top5_both %>%
select(Cluster, display_gene, avg_log2FC, p_val_adj, direction) %>%
kable(format = "html", digits = 2,
caption = "Top 5 Up & Down Genes per Cell Type (Based on Fold Change)")
install.packages("biomartr")
install.packages("BiocManager")
library(biomaRt)
library(biomaRt)
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if (!requireNamespace("biomaRt", quietly = TRUE)) BiocManager::install("biomaRt")
library(biomaRt)
library(dplyr)
# 1) Connect to Ensembl (mouse)
mart <- useEnsembl(biomart = "ensembl", dataset = "mmusculus_gene_ensembl")
# 2) Pull a mapping table for all Ensembl IDs present in your data
gene_map <- getBM(
attributes = c("ensembl_gene_id", "external_gene_name"),
filters    = "ensembl_gene_id",
values     = unique(DEG_data$gene),
mart       = mart
)
library(dplyr)
library(ggplot2)
library(forcats)
library(knitr)
# Step 1: Loosen filter â€” keep all DEGs with non-zero fold change
top10_both <- DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
# Remove unnamed or predicted genes (optional but recommended)
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene)) %>%
group_by(Cluster) %>%
slice_max(order_by = avg_log2FC, n = 10, with_ties = FALSE) %>%
mutate(direction = "Up (old vs young)") %>%
bind_rows(
DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene)) %>%
group_by(Cluster) %>%
slice_min(order_by = avg_log2FC, n = 10, with_ties = FALSE) %>%
mutate(direction = "Down (old vs young)")
) %>%
ungroup() %>%
mutate(
display_gene = ifelse(is.na(gene_symbol) | gene_symbol == "", gene, gene_symbol),
p_val_adj = signif(p_val_adj, 3)
) %>%
arrange(Cluster, desc(avg_log2FC))
# Step 2: Show as nice table
top10_both %>%
select(Cluster, display_gene, avg_log2FC, p_val_adj, direction) %>%
kable(format = "html", digits = 2,
caption = "Top 10 Up & Down Genes per Cell Type (Based on Fold Change)")
# Define and clean
top5_both <- DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
# Remove uninformative predicted/missing genes
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene)) %>%
mutate(display_gene = ifelse(is.na(gene_symbol) | gene_symbol == "", gene, gene_symbol)) %>%
group_by(Cluster) %>%
slice_max(order_by = avg_log2FC, n = 5, with_ties = FALSE) %>%
mutate(direction = "Up (old vs young)") %>%
bind_rows(
DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene)) %>%
mutate(display_gene = ifelse(is.na(gene_symbol) | gene_symbol == "", gene, gene_symbol)) %>%
group_by(Cluster) %>%
slice_min(order_by = avg_log2FC, n = 5, with_ties = FALSE) %>%
mutate(direction = "Down (old vs young)")
) %>%
ungroup() %>%
mutate(p_val_adj = signif(p_val_adj, 3)) %>%
arrange(Cluster, desc(avg_log2FC))
# ðŸ“‹ Table
top5_both %>%
select(Cluster, display_gene, avg_log2FC, p_val_adj, direction) %>%
kable(format = "html", digits = 2,
caption = "Top 5 Up & Down Genes per Cell Type (Based on Fold Change)")
# --- Step 1: Filter top 10 up & down per cluster ---
top10_up <- DEG_data %>%
filter(Cluster %in% c("Endothelial_cells", "Macrophages", "memory_T_cells"),
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC > 0) %>%
group_by(Cluster) %>%
slice_max(order_by = avg_log2FC, n = 10, with_ties = FALSE)
top10_down <- DEG_data %>%
filter(Cluster %in% c("Endothelial_cells", "Macrophages", "memory_T_cells"),
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC < 0) %>%
group_by(Cluster) %>%
slice_min(order_by = avg_log2FC, n = 10, with_ties = FALSE)
top10_both <- bind_rows(top10_up, top10_down) %>%
ungroup() %>%
mutate(direction = ifelse(avg_log2FC > 0, "Up (old vs young)", "Down (old vs young)"))
genes_to_map <- unique(top10_both$gene)
length(genes_to_map)  # Should be < 100
# Install once if needed
if (!requireNamespace("org.Mm.eg.db", quietly = TRUE)) {
BiocManager::install("org.Mm.eg.db")
}
library(org.Mm.eg.db)
library(AnnotationDbi)
gene_symbols <- mapIds(org.Mm.eg.db,
keys = genes_to_map,
column = "SYMBOL",
keytype = "ENSEMBL",
multiVals = "first")
top10_annotated <- top10_both %>%
mutate(display_gene = ifelse(!is.na(gene_symbol) & gene_symbol != "",
gene_symbol,
ifelse(!is.na(gene_symbols[gene]),
gene_symbols[gene], gene)))
top10_annotated %>%
select(gene, gene_symbol, display_gene) %>%
head(10)
top10_annotated %>%
dplyr::select(gene, gene_symbol, display_gene) %>%
head(10)
library(dplyr)
library(ggplot2)
library(forcats)
library(knitr)
# Define and clean
top5_both <- DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
# Remove uninformative predicted/missing genes
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene)) %>%
mutate(display_gene = ifelse(is.na(gene_symbol) | gene_symbol == "", gene, gene_symbol)) %>%
group_by(Cluster) %>%
slice_max(order_by = avg_log2FC, n = 5, with_ties = FALSE) %>%
mutate(direction = "Up (old vs young)") %>%
bind_rows(
DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene)) %>%
mutate(display_gene = ifelse(is.na(gene_symbol) | gene_symbol == "", gene, gene_symbol)) %>%
group_by(Cluster) %>%
slice_min(order_by = avg_log2FC, n = 5, with_ties = FALSE) %>%
mutate(direction = "Down (old vs young)")
) %>%
ungroup() %>%
mutate(p_val_adj = signif(p_val_adj, 3)) %>%
arrange(Cluster, desc(avg_log2FC))
# ðŸ“‹ Table
top5_both %>%
select(Cluster, display_gene, avg_log2FC, p_val_adj, direction) %>%
kable(format = "html", digits = 2,
caption = "Top 5 Up & Down Genes per Cell Type (Based on Fold Change)")
library(dplyr)
library(ggplot2)
library(forcats)
library(knitr)
# Define and clean
top5_both <- DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
# Remove uninformative predicted/missing genes
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene)) %>%
mutate(display_gene = ifelse(is.na(gene_symbol) | gene_symbol == "", gene, gene_symbol)) %>%
group_by(Cluster) %>%
slice_max(order_by = avg_log2FC, n = 5, with_ties = FALSE) %>%
mutate(direction = "Up (old vs young)") %>%
bind_rows(
DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene)) %>%
mutate(display_gene = ifelse(is.na(gene_symbol) | gene_symbol == "", gene, gene_symbol)) %>%
group_by(Cluster) %>%
slice_min(order_by = avg_log2FC, n = 5, with_ties = FALSE) %>%
mutate(direction = "Down (old vs young)")
) %>%
ungroup() %>%
mutate(p_val_adj = signif(p_val_adj, 3)) %>%
arrange(Cluster, desc(avg_log2FC))
# ðŸ“‹ Table
top5_both %>%
select(Cluster, display_gene, avg_log2FC, p_val_adj, direction) %>%
kable(format = "html", digits = 2,
caption = "Top 5 Up & Down Genes per Cell Type (Based on Fold Change)")
library(dplyr)
library(ggplot2)
library(forcats)
library(knitr)
# Define and clean
top5_both <- DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
# Remove uninformative predicted/missing genes
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene)) %>%
mutate(display_gene = ifelse(is.na(gene_symbol) | gene_symbol == "", gene, gene_symbol)) %>%
group_by(Cluster) %>%
slice_max(order_by = avg_log2FC, n = 5, with_ties = FALSE) %>%
mutate(direction = "Up (old vs young)") %>%
bind_rows(
DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene)) %>%
mutate(display_gene = ifelse(is.na(gene_symbol) | gene_symbol == "", gene, gene_symbol)) %>%
group_by(Cluster) %>%
slice_min(order_by = avg_log2FC, n = 5, with_ties = FALSE) %>%
mutate(direction = "Down (old vs young)")
) %>%
ungroup() %>%
mutate(p_val_adj = signif(p_val_adj, 3)) %>%
arrange(Cluster, desc(avg_log2FC))
# ðŸ“‹ Table
top5_both %>%
dplyr::select(Cluster, display_gene, avg_log2FC, p_val_adj, direction) %>%
kable(format = "html", digits = 2,
caption = "Top 5 Up & Down Genes per Cell Type (Based on Fold Change)")
# ðŸ“Š Plot
ggplot(top5_both,
aes(x = fct_reorder(display_gene, avg_log2FC),
y = avg_log2FC,
color = direction)) +
geom_point(size = 3) +
geom_segment(aes(xend = display_gene, y = 0, yend = avg_log2FC),
linewidth = 0.6) +
facet_wrap(~ Cluster, scales = "free_y") +
coord_flip() +
scale_color_manual(values = c("Up (old vs young)" = "firebrick2",
"Down (old vs young)" = "dodgerblue3")) +
labs(title = "Top 5 Up & Down DEGs per Cell Type (Based on Fold Change)",
x = "Gene", y = "log2FC (old vs young)", color = "") +
theme_minimal(base_size = 12) +
theme(legend.position = "top")
library(dplyr)
library(dplyr)
library(ggplot2)
library(forcats)
library(knitr)
# Define and clean
top5_both <- DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
# Remove uninformative predicted/missing genes
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene)) %>%
mutate(display_gene = ifelse(is.na(gene_symbol) | gene_symbol == "", gene, gene_symbol)) %>%
group_by(Cluster) %>%
slice_max(order_by = avg_log2FC, n = 5, with_ties = FALSE) %>%
mutate(direction = "Up (old vs young)") %>%
bind_rows(
DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene)) %>%
mutate(display_gene = ifelse(is.na(gene_symbol) | gene_symbol == "", gene, gene_symbol)) %>%
group_by(Cluster) %>%
slice_min(order_by = avg_log2FC, n = 5, with_ties = FALSE) %>%
mutate(direction = "Down (old vs young)")
) %>%
ungroup() %>%
mutate(p_val_adj = signif(p_val_adj, 3)) %>%
arrange(Cluster, desc(avg_log2FC))
# ðŸ“‹ Table
top5_both %>%
dplyr::select(Cluster, display_gene, avg_log2FC, p_val_adj, direction) %>%
kable(format = "html", digits = 2,
caption = "Top 5 Up & Down Genes per Cell Type (Based on Fold Change)")
# ðŸ“Š Plot
ggplot(top5_both,
aes(x = fct_reorder(display_gene, avg_log2FC),
y = avg_log2FC,
color = direction)) +
geom_point(size = 3) +
geom_segment(aes(xend = display_gene, y = 0, yend = avg_log2FC),
linewidth = 0.6) +
facet_wrap(~ Cluster, scales = "free_y") +
coord_flip() +
scale_color_manual(values = c("Up (old vs young)" = "firebrick2",
"Down (old vs young)" = "dodgerblue3")) +
labs(title = "Top 5 Up & Down DEGs per Cell Type (Based on Fold Change)",
x = "Gene", y = "log2FC (old vs young)", color = "") +
theme_minimal(base_size = 12) +
theme(legend.position = "top")
library(dplyr)
# Load necessary packages
library(tidyverse)
library(dplyr)
library(ggplot2)
library(tidyr)
library(forcats)
library(knitr)
# Define and clean
top5_both <- DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
# Remove uninformative predicted/missing genes
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene)) %>%
mutate(display_gene = ifelse(is.na(gene_symbol) | gene_symbol == "", gene, gene_symbol)) %>%
group_by(Cluster) %>%
slice_max(order_by = avg_log2FC, n = 5, with_ties = FALSE) %>%
mutate(direction = "Up (old vs young)") %>%
bind_rows(
DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene)) %>%
mutate(display_gene = ifelse(is.na(gene_symbol) | gene_symbol == "", gene, gene_symbol)) %>%
group_by(Cluster) %>%
slice_min(order_by = avg_log2FC, n = 5, with_ties = FALSE) %>%
mutate(direction = "Down (old vs young)")
) %>%
ungroup() %>%
mutate(p_val_adj = signif(p_val_adj, 3)) %>%
arrange(Cluster, desc(avg_log2FC))
# ðŸ“‹ Table
top5_both %>%
dplyr::select(Cluster, display_gene, avg_log2FC, p_val_adj, direction) %>%
kable(format = "html", digits = 2,
caption = "Top 5 Up & Down Genes per Cell Type (Based on Fold Change)")
# ðŸ“Š Plot
ggplot(top5_both,
aes(x = fct_reorder(display_gene, avg_log2FC),
y = avg_log2FC,
color = direction)) +
geom_point(size = 3) +
geom_segment(aes(xend = display_gene, y = 0, yend = avg_log2FC),
linewidth = 0.6) +
facet_wrap(~ Cluster, scales = "free_y") +
coord_flip() +
scale_color_manual(values = c("Up (old vs young)" = "firebrick2",
"Down (old vs young)" = "dodgerblue3")) +
labs(title = "Top 5 Up & Down DEGs per Cell Type (Based on Fold Change)",
x = "Gene", y = "log2FC (old vs young)", color = "") +
theme_minimal(base_size = 12) +
theme(legend.position = "top")
library(dplyr)
# Define and clean
top5_both <- DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
# Remove uninformative predicted/missing genes
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene)) %>%
mutate(display_gene = ifelse(is.na(gene_symbol) | gene_symbol == "", gene, gene_symbol)) %>%
group_by(Cluster) %>%
slice_max(order_by = avg_log2FC, n = 5, with_ties = FALSE) %>%
mutate(direction = "Up (old vs young)") %>%
bind_rows(
DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene)) %>%
mutate(display_gene = ifelse(is.na(gene_symbol) | gene_symbol == "", gene, gene_symbol)) %>%
group_by(Cluster) %>%
slice_min(order_by = avg_log2FC, n = 5, with_ties = FALSE) %>%
mutate(direction = "Down (old vs young)")
) %>%
ungroup() %>%
mutate(p_val_adj = signif(p_val_adj, 3)) %>%
arrange(Cluster, desc(avg_log2FC))
# ðŸ“‹ Table
top5_both %>%
dplyr::select(Cluster, display_gene, avg_log2FC, p_val_adj, direction) %>%
kable(format = "html", digits = 2,
caption = "Top 5 Up & Down Genes per Cell Type (Based on Fold Change)")
# ðŸ“Š Plot
ggplot(top5_both,
aes(x = fct_reorder(display_gene, avg_log2FC),
y = avg_log2FC,
color = direction)) +
geom_point(size = 3) +
geom_segment(aes(xend = display_gene, y = 0, yend = avg_log2FC),
linewidth = 0.6) +
facet_wrap(~ Cluster, scales = "free_y") +
coord_flip() +
scale_color_manual(values = c("Up (old vs young)" = "firebrick2",
"Down (old vs young)" = "dodgerblue3")) +
labs(title = "Top 5 Up & Down DEGs per Cell Type (Based on Fold Change)",
x = "Gene", y = "log2FC (old vs young)", color = "") +
theme_minimal(base_size = 12) +
theme(legend.position = "top")
# Define and clean
top5_both <- DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
# Remove uninformative predicted/missing genes
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene)) %>%
mutate(display_gene = ifelse(is.na(gene_symbol) | gene_symbol == "", gene, gene_symbol)) %>%
group_by(Cluster) %>%
slice_max(order_by = avg_log2FC, n = 5, with_ties = FALSE) %>%
mutate(direction = "Up (old vs young)") %>%
bind_rows(
DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene)) %>%
mutate(display_gene = ifelse(is.na(gene_symbol) | gene_symbol == "", gene, gene_symbol)) %>%
group_by(Cluster) %>%
slice_min(order_by = avg_log2FC, n = 5, with_ties = FALSE) %>%
mutate(direction = "Down (old vs young)")
) %>%
ungroup() %>%
mutate(p_val_adj = signif(p_val_adj, 3)) %>%
arrange(Cluster, desc(avg_log2FC))
# ðŸ“‹ Table
top5_both %>%
dplyr::select(Cluster, display_gene, avg_log2FC, p_val_adj, direction) %>%
kable(format = "html", digits = 2,
caption = "Top 5 Up & Down Genes per Cell Type (Based on Fold Change)")
# ðŸ“Š Plot
ggplot(top5_both,
aes(x = fct_reorder(display_gene, avg_log2FC),
y = avg_log2FC,
color = direction)) +
geom_point(size = 3) +
geom_segment(aes(xend = display_gene, y = 0, yend = avg_log2FC),
linewidth = 0.6) +
facet_wrap(~ Cluster, scales = "free_y") +
coord_flip() +
scale_color_manual(values = c("Up (old vs young)" = "firebrick2",
"Down (old vs young)" = "dodgerblue3")) +
labs(title = "Top 5 Up & Down DEGs per Cell Type (Based on Fold Change)",
x = "Gene", y = "log2FC (old vs young)", color = "") +
theme_minimal(base_size = 12) +
theme(legend.position = "top")
# ðŸ“Š Define and clean top 5 DEGs per cluster
top5_both <- DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
# Remove uninformative predicted/missing genes
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene_symbol)) %>%
mutate(display_gene = ifelse(is.na(gene_symbol) | gene_symbol == "", gene_symbol, gene_symbol)) %>%
group_by(Cluster) %>%
slice_max(order_by = avg_log2FC, n = 5, with_ties = FALSE) %>%
mutate(direction = "Up (old vs young)") %>%
bind_rows(
DEG_data %>%
filter(Cluster %in% cell_types,
ident.1 == "G2_old", ident.2 == "G1_young",
avg_log2FC != 0) %>%
filter(!grepl("^Gm|^Rik|^ENSMUSG", gene_symbol)) %>%
mutate(display_gene = ifelse(is.na(gene_symbol) | gene_symbol == "", gene_symbol, gene_symbol)) %>%
group_by(Cluster) %>%
slice_min(order_by = avg_log2FC, n = 5, with_ties = FALSE) %>%
mutate(direction = "Down (old vs young)")
) %>%
ungroup() %>%
mutate(p_val_adj = signif(p_val_adj, 3)) %>%
arrange(Cluster, desc(avg_log2FC))
# ðŸ“‹ Table
top5_both %>%
select(Cluster, display_gene, avg_log2FC, p_val_adj, direction) %>%
kable(format = "html", digits = 2,
caption = "Top 5 Up & Down Genes per Cell Type (Based on Fold Change)")
# ðŸ“ˆ Plot
ggplot(top5_both,
aes(x = fct_reorder(display_gene, avg_log2FC),
y = avg_log2FC,
color = direction)) +
geom_point(size = 3) +
geom_segment(aes(xend = display_gene, y = 0, yend = avg_log2FC),
size = 0.6) +  # NOTE: use `size` not `linewidth` for compatibility
facet_wrap(~ Cluster, scales = "free_y") +
coord_flip() +
scale_color_manual(values = c("Up (old vs young)" = "firebrick2",
"Down (old vs young)" = "dodgerblue3")) +
labs(title = "Top 5 Up & Down DEGs per Cell Type (Based on Fold Change)",
x = "Gene", y = "log2FC (old vs young)", color = "") +
theme_minimal(base_size = 12) +
theme(legend.position = "top")
